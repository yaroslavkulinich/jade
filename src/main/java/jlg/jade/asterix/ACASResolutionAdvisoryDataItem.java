/**
 * Created by alexandru on 11/1/16.
 */
package jlg.jade.asterix;

import jlg.jade.asterix.cat048.Cat048Item260BitSetIndexes;
import jlg.jade.common.ModeCCode;

import java.util.BitSet;

/**
 * Currently active Resolution Advisory (RA), if any, generated by the
 * ACAS associated with the transponder transmitting the report and
 * threat identity data.
 *
 * This class should be extended by both Cat048Item260 and Cat062Item380Subfield12 because they both
 * contain the same information: 56-bit message conveying Mode S Comm B message data of BDS
 * Register 3,0
 */
public abstract class ACASResolutionAdvisoryDataItem extends FixedLengthAsterixData {
    private int threatTypeIndicator;            // TTI
    private int TIDModeSAddress;                // TID ModeS Address
    private int multiThreatIndicator;           // MTI / MTE
    private int raTerminated;                   // RAT
    private int ARABit41;
    private int ARABit42;
    private int ARABit43;
    private int ARABit44;
    private int ARABit45;
    private int ARABit46;
    private int ARABit47;
    private int ARABit48;
    private int ARABit49;
    private int ARABit50;
    private int RACBit55;
    private int RACBit56;
    private int RACBit57;
    private int RACBit58;
    private int TIDAltitude;
    private int TIDRange;
    private int TIDBearing;

    @Override
    protected int setSizeInBytes() {
        return AsterixItemLength.SEVEN_BYTES.getValue();
    }

    @Override
    protected void decodeFromByteArray(byte[] input, int offset) {
        BitSet bs = BitSet.valueOf(
                new byte[]{input[offset], input[offset + 1], input[offset + 2], input[offset + 3],
                        input[offset + 4], input[offset + 5], input[offset + 6]});

        // TTI
        int TTIBit1Value = 0;
        int TTIBit0Value = 0;

        if (bs.get(Cat048Item260BitSetIndexes.TTI_BIT1_INDEX.getValue())) {
            TTIBit1Value = 1;
        }

        if (bs.get(Cat048Item260BitSetIndexes.TTI_BIT0_INDEX.getValue())) {
            TTIBit0Value = 1;
        }

        this.threatTypeIndicator = TTIBit1Value * 2 + TTIBit0Value;

        appendItemDebugMsg("TTI", this.threatTypeIndicator);

        // when TTI = 1 then TID should contain a ModeS Address
        if (this.threatTypeIndicator == 1) {

            // create a String Builder to store the binary representation of the last 4 bytes for item260
            StringBuilder sb = new StringBuilder();
            for (int i = 3; i <= 6; i++) {
                // for each of the last 4 bytes in the input append the zero padded representation to the string builder
                String byteBinaryRepresentation = Integer.toBinaryString(input[offset + i]);
                String zeroPaddedBinaryRepresentation = ("00000000" + byteBinaryRepresentation)
                        .substring(byteBinaryRepresentation.length());

                sb.append(zeroPaddedBinaryRepresentation);
            }

            // extract from the string builder the 24 bits
            String TIDModeSAddressRepresentation = sb.toString().substring(7, 30);

            // parse the extracted 24 bits binary represented string to get the ModeS Address
            this.TIDModeSAddress = Integer.parseInt(TIDModeSAddressRepresentation, 2);

            appendItemDebugMsg("TID ModeS Address", this.TIDModeSAddress);

        }

        // when TTI = 2 then TID should contain altitude, range and bearing
        if (this.threatTypeIndicator == 2) {

            // TIDAltitude ModeC bits
            int modeCAltitudeCodeBitA1 = 0;
            int modeCAltitudeCodeBitA2 = 0;
            int modeCAltitudeCodeBitA4 = 0;
            int modeCAltitudeCodeBitB1 = 0;
            int modeCAltitudeCodeBitB2 = 0;
            int modeCAltitudeCodeBitB4 = 0;
            int modeCAltitudeCodeBitC1 = 0;
            int modeCAltitudeCodeBitC2 = 0;
            int modeCAltitudeCodeBitC4 = 0;
            // TID Altitude ModeC bit D1 is never used according to ICAO documentation
            int modeCAltitudeCodeBitD1 = 0;
            int modeCAltitudeCodeBitD2 = 0;
            int modeCAltitudeCodeBitD4 = 0;

            // TID Range bits
            int tidRangeBit1Value = 0;
            int tidRangeBit2Value = 0;
            int tidRangeBit3Value = 0;
            int tidRangeBit4Value = 0;
            int tidRangeBit5Value = 0;
            int tidRangeBit6Value = 0;
            int tidRangeBit7Value = 0;

            // TID Bearing
            int tidBearingBit1Value = 0;
            int tidBearingBit2Value = 0;
            int tidBearingBit3Value = 0;
            int tidBearingBit4Value = 0;
            int tidBearingBit5Value = 0;
            int tidBearingBit6Value = 0;

            // altitude
            // set individual Gray Code bits
            // Mode C altitude code of threat. Bit ordering is
            // C1 A1 C2 A2 C4 A4 0 B1 D1 B2 D2 B4 D4

            if (bs.get(Cat048Item260BitSetIndexes.BIT_C1_INDEX.getValue())) {
                modeCAltitudeCodeBitC1 = 1;
            }

            if (bs.get(Cat048Item260BitSetIndexes.BIT_A1_INDEX.getValue())) {
                modeCAltitudeCodeBitA1 = 1;
            }

            if (bs.get(Cat048Item260BitSetIndexes.BIT_C2_INDEX.getValue())) {
                modeCAltitudeCodeBitC2 = 1;
            }

            if (bs.get(Cat048Item260BitSetIndexes.BIT_A2_INDEX.getValue())) {
                modeCAltitudeCodeBitA2 = 1;
            }

            if (bs.get(Cat048Item260BitSetIndexes.BIT_C4_INDEX.getValue())) {
                modeCAltitudeCodeBitC4 = 1;
            }

            if (bs.get(Cat048Item260BitSetIndexes.BIT_A4_INDEX.getValue())) {
                modeCAltitudeCodeBitA4 = 1;
            }

            if (bs.get(Cat048Item260BitSetIndexes.BIT_B1_INDEX.getValue())) {
                modeCAltitudeCodeBitB1 = 1;
            }

            // bit D1 is never used so we don't have an index and we do not check it

            if (bs.get(Cat048Item260BitSetIndexes.BIT_B2_INDEX.getValue())) {
                modeCAltitudeCodeBitB2 = 1;
            }

            if (bs.get(Cat048Item260BitSetIndexes.BIT_D2_INDEX.getValue())) {
                modeCAltitudeCodeBitD2 = 1;
            }

            if (bs.get(Cat048Item260BitSetIndexes.BIT_B4_INDEX.getValue())) {
                modeCAltitudeCodeBitB4 = 1;
            }

            if (bs.get(Cat048Item260BitSetIndexes.BIT_D4_INDEX.getValue())) {
                modeCAltitudeCodeBitD4 = 1;
            }

            // build 2 Strings representing the GrayCode 500ft and 100ft increments

            // 500ft increments are stored in bits D2 D4 A1 A2 A4 B1 B2 B4
            StringBuilder fiveHundredIncrementsBuilder = new StringBuilder();
            fiveHundredIncrementsBuilder.append(modeCAltitudeCodeBitD2)
                    .append(modeCAltitudeCodeBitD4).append(modeCAltitudeCodeBitA1)
                    .append(modeCAltitudeCodeBitA2).append(modeCAltitudeCodeBitA4)
                    .append(modeCAltitudeCodeBitB1).append(modeCAltitudeCodeBitB2)
                    .append(modeCAltitudeCodeBitB4);

            int fiveHundredIncrementsGrayCode = Integer
                    .parseInt(fiveHundredIncrementsBuilder.toString(), 2);

            // 100ft increments are stored in bits C1 C2 C4
            StringBuilder oneHundredIncrementsBuilder = new StringBuilder();
            oneHundredIncrementsBuilder.append(modeCAltitudeCodeBitC1)
                    .append(modeCAltitudeCodeBitC2).append(modeCAltitudeCodeBitC4);

            int oneHundredIncrementsGrayCode = Integer
                    .parseInt(oneHundredIncrementsBuilder.toString(), 2);

            // pass the 2 variables to the ModeC Gray Code to feet calculator
            this.TIDAltitude = ModeCCode
                    .grayCodeToFeet(fiveHundredIncrementsGrayCode, oneHundredIncrementsGrayCode);

            appendItemDebugMsg("TID Altitude", this.TIDAltitude);

            // range
            if (bs.get(Cat048Item260BitSetIndexes.BIT_TID_RANGE1_INDEX.getValue())) {
                tidRangeBit1Value = 1;
            }

            if (bs.get(Cat048Item260BitSetIndexes.BIT_TID_RANGE2_INDEX.getValue())) {
                tidRangeBit2Value = 1;
            }

            if (bs.get(Cat048Item260BitSetIndexes.BIT_TID_RANGE3_INDEX.getValue())) {
                tidRangeBit3Value = 1;
            }

            if (bs.get(Cat048Item260BitSetIndexes.BIT_TID_RANGE4_INDEX.getValue())) {
                tidRangeBit4Value = 1;
            }

            if (bs.get(Cat048Item260BitSetIndexes.BIT_TID_RANGE5_INDEX.getValue())) {
                tidRangeBit5Value = 1;
            }

            if (bs.get(Cat048Item260BitSetIndexes.BIT_TID_RANGE6_INDEX.getValue())) {
                tidRangeBit6Value = 1;
            }

            if (bs.get(Cat048Item260BitSetIndexes.BIT_TID_RANGE7_INDEX.getValue())) {
                tidRangeBit7Value = 1;
            }

            StringBuilder tidRangeBinaryRepresentation = new StringBuilder();
            tidRangeBinaryRepresentation.append(tidRangeBit1Value).append(tidRangeBit2Value)
                    .append(tidRangeBit3Value).append(tidRangeBit4Value).append(tidRangeBit5Value)
                    .append(tidRangeBit6Value).append(tidRangeBit7Value);

            this.TIDRange = Integer.parseInt(tidRangeBinaryRepresentation.toString(), 2);

            appendItemDebugMsg("TID Range", this.TIDRange);

            // bearing
            if (bs.get(Cat048Item260BitSetIndexes.BIT_TID_BEARING1_INDEX.getValue())) {
                tidBearingBit1Value = 1;
            }

            if (bs.get(Cat048Item260BitSetIndexes.BIT_TID_BEARING2_INDEX.getValue())) {
                tidBearingBit2Value = 1;
            }

            if (bs.get(Cat048Item260BitSetIndexes.BIT_TID_BEARING3_INDEX.getValue())) {
                tidBearingBit3Value = 1;
            }

            if (bs.get(Cat048Item260BitSetIndexes.BIT_TID_BEARING4_INDEX.getValue())) {
                tidBearingBit4Value = 1;
            }

            if (bs.get(Cat048Item260BitSetIndexes.BIT_TID_BEARING5_INDEX.getValue())) {
                tidBearingBit5Value = 1;
            }

            if (bs.get(Cat048Item260BitSetIndexes.BIT_TID_BEARING6_INDEX.getValue())) {
                tidBearingBit6Value = 1;
            }

            StringBuilder tidBearingBinaryRepresentation = new StringBuilder();
            tidBearingBinaryRepresentation.append(tidBearingBit1Value).append(tidBearingBit2Value)
                    .append(tidBearingBit3Value).append(tidBearingBit4Value)
                    .append(tidBearingBit5Value).append(tidBearingBit6Value);

            this.TIDBearing = Integer.parseInt(tidBearingBinaryRepresentation.toString(), 2);

            appendItemDebugMsg("TID Bearing", this.TIDBearing);
        }

        if (bs.get(Cat048Item260BitSetIndexes.ARA_BIT41_INDEX.getValue())) {
            this.ARABit41 = 1;
        }

        appendItemDebugMsg("ARABit41", this.ARABit41);

        if (bs.get(Cat048Item260BitSetIndexes.ARA_BIT42_INDEX.getValue())) {
            this.ARABit42 = 1;
        }

        appendItemDebugMsg("ARABit42", this.ARABit42);

        if (bs.get(Cat048Item260BitSetIndexes.ARA_BIT43_INDEX.getValue())) {
            this.ARABit43 = 1;
        }

        appendItemDebugMsg("ARABit43", this.ARABit43);

        if (bs.get(Cat048Item260BitSetIndexes.ARA_BIT44_INDEX.getValue())) {
            this.ARABit44 = 1;
        }

        appendItemDebugMsg("ARABit44", this.ARABit44);

        if (bs.get(Cat048Item260BitSetIndexes.ARA_BIT45_INDEX.getValue())) {
            this.ARABit45 = 1;
        }

        appendItemDebugMsg("ARABit45", this.ARABit45);

        if (bs.get(Cat048Item260BitSetIndexes.ARA_BIT46_INDEX.getValue())) {
            this.ARABit46 = 1;
        }

        appendItemDebugMsg("ARABit46", this.ARABit46);

        if (bs.get(Cat048Item260BitSetIndexes.ARA_BIT47_INDEX.getValue())) {
            this.ARABit47 = 1;
        }

        appendItemDebugMsg("ARABit47", this.ARABit47);

        if (bs.get(Cat048Item260BitSetIndexes.ARA_BIT48_INDEX.getValue())) {
            this.ARABit48 = 1;
        }

        appendItemDebugMsg("ARABit48", this.ARABit48);


        if (bs.get(Cat048Item260BitSetIndexes.ARA_BIT49_INDEX.getValue())) {
            this.ARABit49 = 1;
        }

        appendItemDebugMsg("ARABit49", this.ARABit49);

        if (bs.get(Cat048Item260BitSetIndexes.ARA_BIT50_INDEX.getValue())) {
            this.ARABit50 = 1;
        }

        appendItemDebugMsg("ARABit50", this.ARABit50);

        // RAC bits

        if (bs.get(Cat048Item260BitSetIndexes.RAC_BIT1_INDEX.getValue())) {
            this.RACBit55 = 1;
        }

        appendItemDebugMsg("RACBit55", this.RACBit55);

        if (bs.get(Cat048Item260BitSetIndexes.RAC_BIT2_INDEX.getValue())) {
            this.RACBit56 = 1;
        }

        appendItemDebugMsg("RACBit56", this.RACBit56);

        if (bs.get(Cat048Item260BitSetIndexes.RAC_BIT3_INDEX.getValue())) {
            this.RACBit57 = 1;
        }

        appendItemDebugMsg("RACBit57", this.RACBit57);

        if (bs.get(Cat048Item260BitSetIndexes.RAC_BIT4_INDEX.getValue())) {
            this.RACBit58 = 1;
        }

        appendItemDebugMsg("RACBit58", this.RACBit58);

        if (bs.get(Cat048Item260BitSetIndexes.MTI_BIT_INDEX.getValue())) {
            this.multiThreatIndicator = 1;
        }

        appendItemDebugMsg("MTI", this.multiThreatIndicator);

        if (bs.get(Cat048Item260BitSetIndexes.RAT_BIT_INDEX.getValue())) {
            this.raTerminated = 1;
        }

        appendItemDebugMsg("RAT", this.raTerminated);
    }

    public int getThreatTypeIndicator() {
        return threatTypeIndicator;
    }

    public int getARABit41() {
        return ARABit41;
    }

    public int getARABit42() {
        return ARABit42;
    }

    public int getARABit43() {
        return ARABit43;
    }

    public int getARABit44() {
        return ARABit44;
    }

    public int getARABit45() {
        return ARABit45;
    }

    public int getARABit46() {
        return ARABit46;
    }

    public int getARABit47() {
        return ARABit47;
    }

    public int getARABit48() {
        return ARABit48;
    }

    public int getARABit49() {
        return ARABit49;
    }

    public int getARABit50() {
        return ARABit50;
    }

    public int getRACBit55() {
        return RACBit55;
    }

    public int getRACBit56() {
        return RACBit56;
    }

    public int getRACBit57() {
        return RACBit57;
    }

    public int getRACBit58() {
        return RACBit58;
    }

    public int getMultiThreatIndicator() {
        return multiThreatIndicator;
    }

    public int getRaTerminated() {
        return raTerminated;
    }

    /**
     * @return Returns the ModeS Address contained in the Threat Identity Data when Threat Type Indicator is 1
     */
    public int getTIDModeSAddress() {
        return TIDModeSAddress;
    }

    public int getTIDAltitude() {
        return TIDAltitude;
    }

    public int getTIDRange() {
        return TIDRange;
    }

    public int getTIDBearing() {
        return TIDBearing;
    }
}
